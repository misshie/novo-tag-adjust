# novo_tag_adjust.rb
#
# input: A SAM file generated by Novoalign using reference sequences containing ambiguous nucleotides
# output: A SAM file with corrected NM tags ignoring ambifuous nucleotides
#
# Copyright 2014-2018 by Hiroyuki MISHIMA (hmishima at nagasaki-u.ac.jp)
# License: the MIT license

require 'optparse'
require 'pp'

class NovoTagAdjust

  SamRead = Struct.new(:qname, :flag, :rname, :pos, :mapq,
                       :cigar, :rnext, :pnext, :tlen, :seq, :qual, :tags)
  
  def parse_tags(cols)
    tags = Hash.new
    cols.each do |col|
      tag  = col[0..1]
      attr = col[3]
      val  = col[5..-1]
      case attr
      when 'i'
        tags[tag]  = {:attr => attr, :value => Integer(val)}
      when 'f'
        tags[tag]  = {:attr => attr, :value => Float(val)}
      else
        tags[tag]  = {:attr => attr, :value => val}
      end
    end
    tags
  end

  def parse_sam_row(row)
    row.chomp!
    return(nil) if row.empty?
    if row.start_with?('@')
      puts row
      return(nil)
    end
    cols = row.split("\t")
    samread = SamRead.new(*cols[0..10])
    samread.tags = parse_tags(cols[11..-1])
    samread
  end
  
  def parse_md(md)
    md.scan(/\d+|[A-Z]|\^[A-Z]+/).map{|x| (x =~ /[A-Z]/) ? x : Integer(x)}
  end

  def adjust_nm(samrow)
    return(samrow) unless samrow.tags["NM"]
    samrow.tags["NM"][:orig] = samrow.tags["NM"][:value]
    samrow.tags["NM"][:value] = samrow.tags["NM"][:orig] - parse_md(samrow.tags["MD"][:value]).count do |x|
      case x
      when "R", "Y", "S", "W", "K", "M", "D", "B", "H", "V"
        true        
      when /\A\^/
        false
      else
        false
      end
    end
    samrow
  end

  def output_samrow(samrow)
    output = samrow.values[0..10]
    samrow[:tags].each do |k,vs|
      output << "#{k}:#{vs[:attr]}:#{vs[:value]}"
    end
    puts output.join("\t")
  end

  def run(opts)
    ARGF.each_line do |row|
      samread = parse_sam_row(row)
      if samread
        samread = adjust_nm(samread)
        if opts["v"] || opts["varbose"]
          puts
          pp samread
          p parse_md(samread.tags["MD"][:value]) if samread.tags["MD"]
        end
        output_samrow(samread)
      end
    end
  end

end # class NovoTagAdjust

if $0 == __FILE__
  opts = OptionParser.getopts("v", "varbose")
  NovoTagAdjust.new.run(opts)
end
